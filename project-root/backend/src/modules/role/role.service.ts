import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Role } from 'src/entity/role/role.entity';
import { Repository } from 'typeorm';

@Injectable() // l√† 1 decorator , n√≥ ƒë√°nh d·∫•u class l√† 1 provider(nh√† cung c·∫•p d·ªãch v·ª• - nh√† ph√°t tri·ªÉn)
// m·ª•c ƒë√≠ch: cho ph√©p class n√†y ƒë∆∞·ª£c inject(ti√™m) v√†o c√°c th√†nh ph·∫ßn kh√°c nh∆∞ controllers, service, ho·∫∑c c√°c providers kh√°c
// ƒëi·ªÅu n√†y gi√∫p t·ªï ch·ª©c m√£ theo c√°ch modular v√† t√°i s·ª≠ d·ª•ng

//export(xu·∫•t) class n√†y s·∫Ω ƒëc c√°i s·ª≠ d·ª•ng + ƒëc import v√†o class kh√°c
export class RoleService {
  constructor(
    //h√†m kh·ªüi t·∫°o, khi 1 ƒë·ªëi t∆∞·ª£ng ƒëc kh·ªèi t·∫°o th√¨ n√≥ s·∫Ω t·ª± ƒë·ªông g·ªçi t·ªõi contructor, 1 class c√≥ nhi·ªÅu contructor nh∆∞ng s·∫Ω kh√°c nhau v·ªÅ tham s·ªë
    @InjectRepository(Role) //b√°o cho nestJS c·∫ßn th√™m 1 ƒë·ªëi t∆∞∆°ng t·ª´ Repository<Role> cho entity Role
    // readonly ƒë·∫£m b·∫£o bi·∫øn roleRepository ch·ªâ ch·ªè ƒë·∫øn Repository<Role> kh√¥ng ƒëc tr·ªè sang repo kh√°c
    //Repository<Role> l√† 1 class t·ª´ generic t·ª´ typeOrm h·ªó tr·ª£ crud v·ªõi b·∫£ng
    // roleRepository l√† tham s·ªë ƒëc khai b√°o v·ªõi ki·ªÉu Repository<Role>,roleRepository s·∫Ω l∆∞u c√°c ƒë·ªëi t∆∞·ª£ng c·ªßa Repository
    // roleRepository s·∫Ω l√†m vc tr·ª±c ti·∫øp v·ªõi b·∫£ng Role trong csdl
    private readonly roleRepository: Repository<Role>,
  ) {}

  //async h√†m b·∫•t ƒë·ªìng b·ªô  ƒëi·ªÅu n√†y c√≥ nghƒ©a l√† h√†m findAll s·∫Ω th·ª±c hi·ªán 1 t√°c v·ª• c·∫ßn th·ªùi gian ƒë√≥ l√† l·∫•y d·ªØ li·ªáu trong db
  // v√¨ l√† h√†m b·∫•t ƒë·ªìng b·ªô n√™n findAll lu√¥n tr·∫£ v·ªÅ 1 Promise (Promise nh∆∞ l√† 1 l·ªùi h·ª©a: t√¥i s·∫Ω tr·∫£ k·∫øt qu·∫£ sau nh∆∞ng b·∫°n ph·∫£i ch·ªù 1 ch√∫t)
  // Promise<Role> trong khai b√°o ƒë·ªÉ n√≥i v·ªõi typeScript r·∫±ng, h√†m n√†y tr·∫£ v·ªÅ 1 Promise,
  // v√† khi Promise ho√†n th√†nh n√≥ s·∫Ω cho ra 1 m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng ki·ªÉu Role
  async findAll(): Promise<Role[]> {
    //this : ƒë·∫°i di·ªán cho 1 ƒë·ªëi t∆∞·ª£ng c·ªßa class RoleService
    // ƒë·ªëi t∆∞·ª£ng n√†y ch·ª©a thu·ªëc t√≠nh roleRepository
    // khi g·ªçi find, this ch√≠nh l√† ƒë·ªëi t∆∞·ª£ng c·ªßa RoleService v√† this.roleRepository s·∫Ω truy c·∫≠p Repository ƒë·ªÉ l·∫•y d·ªØ li·ªáu c·ªßa b·∫£ng Role
    return this.roleRepository.find();
  }

  async findOne(id: number): Promise<Role> {
    console.log('Calling findOne with id:', id);
    try {
      //d√πng QueryBuilder c·ªßa typeORM
      return await this.roleRepository
        .createQueryBuilder('role') //1 ph∆∞∆°ng th·ª©c c·ªßa Repository trong TypeORM, t·∫°o 1 QueryBuilder, querybuilder l√† 1 c√¥ng c·ª• m·∫°nh m·∫Ω cho ph√©p truy v·∫•n sql thay v√¨ vi·∫øt sql th·ªß c√¥ng, ('role') - alias(b√≠ danh) ƒëc g√°n cho b·∫£ng role trong truy v·∫•n SQL
        .select('role.name') //thay v√¨ select * l√† l·∫•y t·∫•t c·∫£, th√¨ ·ªü ƒë√¢y ch·ªâ l·∫•y 1 t√™n trong b·∫£ng role
        .where('role.id = :id', { id }) // where: ƒëi·ªÅu ki·ªán ch·ªâ l·∫•y b·∫£n ghi c√≥ c·ªôt id trong b·∫£ng role b·∫±ng gi√° tr·ªã c·ªßa tham s·ªë :id, { id } l√† c√∫ ph√°p vi·∫øt t·∫Øt c·ªßa { id: id}, V√≠ d·ª•: N·∫øu g·ªçi findOne(5), th√¨ { id } t∆∞∆°ng ƒë∆∞∆°ng v·ªõi { id: 5 }, nghƒ©a l√† tham s·ªë :id s·∫Ω ƒë∆∞·ª£c thay b·∫±ng gi√° tr·ªã 5 , th√¨ ƒëi·ªÅu ki·ªán WHERE role.id = :id s·∫Ω ƒë∆∞·ª£c thay th·∫ø th√†nh WHERE role.id = 5.
        .getOneOrFail(); //n·∫øu kh√¥ng t√¨m th·∫•y th√¨ n√©m l·ªói EntityNotFoundError
    } catch (error) {
      // gi√∫p debug trong qu√° tr√¨nh ph√°t tri·ªÉn , nh∆∞ng n√≥ kh√¥ng d·ª´ng ch∆∞∆°ng tr√¨nh hay g·ª≠i th√¥ng tin ƒë·∫øn client
      console.log('üöÄ ~ RoleService ~ findOne ~ error:', error);
      //NotFoundException s·∫Ω n√©m m·ªôt exception m·ªõi v·ªõi m√£ HTTP 404 v√† th√¥ng ƒëi·ªáp 'Role not found'.
      // ph·∫£n h·ªìi cho client {
      //"statusCode": 404,
      //"message": "Role not found" }
      throw new NotFoundException('Role not found');
    }
  }

  async findOneName(name: string): Promise<{ name: string }> {
    console.log('Calling findOneName with name:', name);
    try {
      const result = await this.roleRepository //1 ƒë·ªëi t∆∞·ª£ng c√≥ c√°c thu·ªôc t√≠nh c·ªßa Repository<Role>
        .createQueryBuilder('role') // t·∫°o 1 query builder ƒë·ªÉ vi·∫øt code thay th√¨ vi·∫øt sql th·ªß c√¥ng
        .select('role.name') // get name trong b·∫£ng role
        .where('role.name = :name', { name }) // ƒëi·ªÅu ki·ªán ƒëc in ra khi t√™n trong b·∫£ng tr√πng v·ªõi tham s·ªë ng∆∞·ªùi d√πng nh·∫≠p v√†o
        .getOneOrFail(); // gi√∫p n·∫øu kh√¥ng t√¨n th·∫•y b·∫£n ghi n√†o tr·∫£ l·ªói entityNotFoundError
      return { name: result.name };
    } catch (error) {
      console.log('üöÄ ~ RoleService ~ findOneName ~ error:', error);
      throw new NotFoundException('Role not found');
    }
  }
}
